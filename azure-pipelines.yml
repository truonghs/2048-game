trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  versionnumber: $[counter(variables['Build.SourceBranchName'], 1)]

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Towards-AzurePortal'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr repository delete --name demoarc123 --image web-game:$(versionnumber) --yes
      docker build -t demoarc123.azurecr.io/web-game:$(versionnumber) 2048-game
      az acr login -n demoarc123
      docker push demoarc123.azurecr.io/web-game:$(versionnumber)

- powershell: |
    $deploymentExists = kubectl get deployment/web-game -o name --ignore-not-found
    if ($null -eq $deploymentExists) {
      Write-Host "Deployment web-game does not exist. Applying configuration..."
      kubectl apply -n default -f 01_kubernetes_aks.yaml
    } else {
      Write-Host "Deployment web-game already exists. Setting image..."
      kubectl set image deployment/web-game *=demoarc123.azurecr.io/web-game:$(versionnumber) -n default
    }
  displayName: 'Check and Apply or Set'

- powershell: |
    Write-Host "Version Number: $(versionnumber)"
  displayName: 'Print Version Number'
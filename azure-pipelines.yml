trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  versionnumber: $[counter(variables['Build.SourceBranchName'], 1)]

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Towards-AzurePortal'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr repository delete --name demoarc123 --image web-game:$(versionnumber) --yes
      docker build -t demoarc123.azurecr.io/web-game:$(versionnumber) 2048-game
      az acr login -n demoarc123
      docker push demoarc123.azurecr.io/web-game:$(versionnumber)

- powershell: |
    Write-Host "Version Number: $(versionnumber)"
  displayName: 'Print Version Number'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Towards-AzurePortal'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Kiểm tra xem Deployment có tồn tại hay không
      deploymentExists=$(az kubectl get deployment "$(deploymentName)" --resource-group "$(resourceGroup)" --cluster-name "$(aksCluster)" --output json --query metadata.name --only json)
      if [ "$deploymentExists" == "\"$(deploymentName)\"" ]; then
        echo "##vso[task.setvariable variable=deploymentExists]true"
      else
        echo "##vso[task.setvariable variable=deploymentExists]false"
      fi

  displayName: 'Check Deployment Existence'

- task: Kubernetes@1
  condition: eq(variables['deployment_exists'], 'true')
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Towards-AzurePortal'
    azureResourceGroup: 'DemoGroup'
    kubernetesCluster: 'demokubernete'
    namespace: 'default'
    command: 'apply'
    useConfigurationFile: true
    configuration: '01_kubernetes_aks'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    azureSubscriptionEndpointForSecrets: 'Towards-AzurePortal'
    azureContainerRegistry: 'demoarc123.azurecr.io'
    forceUpdate: false

- task: Kubernetes@1
  condition: eq(variables['deployment_exists'], 'false')
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Towards-AzurePortal'
    azureResourceGroup: 'DemoGroup'
    kubernetesCluster: 'demokubernete'
    namespace: 'default'
    command: 'set'
    arguments: 'image deployment/web-game *=demoarc123.azurecr.io/web-game:$(versionnumber)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    azureSubscriptionEndpointForSecrets: 'Towards-AzurePortal'
    azureContainerRegistry: 'demoarc123.azurecr.io'
    forceUpdate: false